// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class BeaconUpgraded extends ethereum.Event {
  get params(): BeaconUpgraded__Params {
    return new BeaconUpgraded__Params(this);
  }
}

export class BeaconUpgraded__Params {
  _event: BeaconUpgraded;

  constructor(event: BeaconUpgraded) {
    this._event = event;
  }

  get beacon(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get sfHost(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get sfCfa(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get sfSuperTokenFactory(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get sfResolver(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get sfVersion(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ReactionDeployed extends ethereum.Event {
  get params(): ReactionDeployed__Params {
    return new ReactionDeployed__Params(this);
  }
}

export class ReactionDeployed__Params {
  _event: ReactionDeployed;

  constructor(event: ReactionDeployed) {
    this._event = event;
  }

  get creator(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get reactionContractAddr(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get reactionTokenName(): string {
    return this._event.parameters[2].value.toString();
  }

  get reactionTokenSymbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get tokenMetadataURI(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class ReactionFactory extends ethereum.SmartContract {
  static bind(address: Address): ReactionFactory {
    return new ReactionFactory("ReactionFactory", address);
  }

  createSuperToken(_token: Address): Address {
    let result = super.call(
      "createSuperToken",
      "createSuperToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toAddress();
  }

  try_createSuperToken(_token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createSuperToken",
      "createSuperToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  deployReaction(
    reactionTokenName: string,
    reactionTokenSymbol: string,
    tokenMetadataURI: string
  ): Address {
    let result = super.call(
      "deployReaction",
      "deployReaction(string,string,string):(address)",
      [
        ethereum.Value.fromString(reactionTokenName),
        ethereum.Value.fromString(reactionTokenSymbol),
        ethereum.Value.fromString(tokenMetadataURI)
      ]
    );

    return result[0].toAddress();
  }

  try_deployReaction(
    reactionTokenName: string,
    reactionTokenSymbol: string,
    tokenMetadataURI: string
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "deployReaction",
      "deployReaction(string,string,string):(address)",
      [
        ethereum.Value.fromString(reactionTokenName),
        ethereum.Value.fromString(reactionTokenSymbol),
        ethereum.Value.fromString(tokenMetadataURI)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getSuperToken(_token: Address): Address {
    let result = super.call(
      "getSuperToken",
      "getSuperToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toAddress();
  }

  try_getSuperToken(_token: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getSuperToken",
      "getSuperToken(address):(address)",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  isSuperToken(_token: Address): boolean {
    let result = super.call("isSuperToken", "isSuperToken(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);

    return result[0].toBoolean();
  }

  try_isSuperToken(_token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isSuperToken", "isSuperToken(address):(bool)", [
      ethereum.Value.fromAddress(_token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  superTokenRegistry(param0: Address): Address {
    let result = super.call(
      "superTokenRegistry",
      "superTokenRegistry(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_superTokenRegistry(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "superTokenRegistry",
      "superTokenRegistry(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class CreateSuperTokenCall extends ethereum.Call {
  get inputs(): CreateSuperTokenCall__Inputs {
    return new CreateSuperTokenCall__Inputs(this);
  }

  get outputs(): CreateSuperTokenCall__Outputs {
    return new CreateSuperTokenCall__Outputs(this);
  }
}

export class CreateSuperTokenCall__Inputs {
  _call: CreateSuperTokenCall;

  constructor(call: CreateSuperTokenCall) {
    this._call = call;
  }

  get _token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CreateSuperTokenCall__Outputs {
  _call: CreateSuperTokenCall;

  constructor(call: CreateSuperTokenCall) {
    this._call = call;
  }

  get superToken(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class DeployReactionCall extends ethereum.Call {
  get inputs(): DeployReactionCall__Inputs {
    return new DeployReactionCall__Inputs(this);
  }

  get outputs(): DeployReactionCall__Outputs {
    return new DeployReactionCall__Outputs(this);
  }
}

export class DeployReactionCall__Inputs {
  _call: DeployReactionCall;

  constructor(call: DeployReactionCall) {
    this._call = call;
  }

  get reactionTokenName(): string {
    return this._call.inputValues[0].value.toString();
  }

  get reactionTokenSymbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get tokenMetadataURI(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class DeployReactionCall__Outputs {
  _call: DeployReactionCall;

  constructor(call: DeployReactionCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class InitializeCall extends ethereum.Call {
  get inputs(): InitializeCall__Inputs {
    return new InitializeCall__Inputs(this);
  }

  get outputs(): InitializeCall__Outputs {
    return new InitializeCall__Outputs(this);
  }
}

export class InitializeCall__Inputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }

  get sfHost(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get sfCfa(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get sfSuperTokenFactory(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get sfResolver(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get sfVersion(): string {
    return this._call.inputValues[4].value.toString();
  }
}

export class InitializeCall__Outputs {
  _call: InitializeCall;

  constructor(call: InitializeCall) {
    this._call = call;
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
