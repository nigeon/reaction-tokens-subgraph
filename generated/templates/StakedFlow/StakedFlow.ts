// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Flowing extends ethereum.Event {
  get params(): Flowing__Params {
    return new Flowing__Params(this);
  }
}

export class Flowing__Params {
  _event: Flowing;

  constructor(event: Flowing) {
    this._event = event;
  }

  get stakingSuperToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get balance(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get recipient(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get flowRate(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StakedFlow extends ethereum.SmartContract {
  static bind(address: Address): StakedFlow {
    return new StakedFlow("StakedFlow", address);
  }

  flow(
    amount: BigInt,
    stakingTokenAddress: Address,
    recipient: Address
  ): Address {
    let result = super.call("flow", "flow(uint256,address,address):(address)", [
      ethereum.Value.fromUnsignedBigInt(amount),
      ethereum.Value.fromAddress(stakingTokenAddress),
      ethereum.Value.fromAddress(recipient)
    ]);

    return result[0].toAddress();
  }

  try_flow(
    amount: BigInt,
    stakingTokenAddress: Address,
    recipient: Address
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "flow",
      "flow(uint256,address,address):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(amount),
        ethereum.Value.fromAddress(stakingTokenAddress),
        ethereum.Value.fromAddress(recipient)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get reactionFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get host(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get cfa(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class FlowCall extends ethereum.Call {
  get inputs(): FlowCall__Inputs {
    return new FlowCall__Inputs(this);
  }

  get outputs(): FlowCall__Outputs {
    return new FlowCall__Outputs(this);
  }
}

export class FlowCall__Inputs {
  _call: FlowCall;

  constructor(call: FlowCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get stakingTokenAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class FlowCall__Outputs {
  _call: FlowCall;

  constructor(call: FlowCall) {
    this._call = call;
  }

  get value0(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}
